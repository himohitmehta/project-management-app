// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.LongText
    refresh_token_expires_in Int?
    access_token             String? @db.LongText
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.LongText
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    username      String?
    gh_username   String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    projects      Project[]
    tasks         Task[]
    assigneeTasks Task[]    @relation(name: "assignee")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    ADMIN
    USER
}

model Project {
    id      String  @id @default(cuid())
    name    String
    ownerId String
    board   Board[]
    members User[]
}

model Board {
    id        String  @id @default(cuid())
    name      String
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    list      List[]

    @@index([projectId])
}

model List {
    id      String @id @default(cuid())
    name    String
    board   Board  @relation(fields: [boardId], references: [id])
    boardId String
    tasks   Task[]
    order   Int

    @@index([boardId])
}

model Task {
    id         String   @id @default(cuid())
    name       String
    order      Int
    list       List     @relation(fields: [listId], references: [id])
    listId     String
    assignee   User?    @relation(name: "assignee", fields: [assigneeId], references: [id])
    assigneeId String?
    creator    User     @relation(fields: [creatorId], references: [id])
    creatorId  String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([listId])
    @@index([assigneeId])
    @@index([creatorId])
}
